package sql_test

import (
	"testing"

	"github.com/swapbyt3s/zenit/common/sql"
)

var queries = []struct{ ID, Input, Expected string }{
	{"comment_case_1",
		"-- select 1;",
		""},
	{"comment_case_2",
		"-- comment \nset @foo = 1;",
		"set @foo = ?;"},
	{"comment_case_3",
		"# comment \nset @foo = 1;",
		"set @foo = ?;"},
	{"comment_case_4",
		"/* comment */ set @foo = 1;",
		" set @foo = ?;"},
	{"comment_case_5",
		"/* comment */\nset @foo = 1;",
		" set @foo = ?;"},
	{"comment_case_6",
		"/*\n* comment\n*/\nset @foo = ?;",
		" set @foo = ?;"},
	{"comment_case_7",
		"set @foo = ?; -- test",
		"set @foo = ?;"},
	{"string_1",
		"select id from foo where email = 'aaa@aaa.aaa';",
		"select id from foo where email = '?';"},
	{"string_2",
		"select id from foo where email = \"aaa@aaa.aaa\";",
		"select id from foo where email = '?';"},
	{"string_3",
		`select "<foo='test'/>don't bar</foo>";`,
		"select '?';"},
	{"string_4",
		`select '<foo=\'test\'/>don\'t bar</foo>';`,
		"select '?';"},
	{"string_5",
		`select '<foo="test"/>don\'t bar</foo>';`,
		"select '?';"},
	{"string_6",
		`select "<foo=\"test\"/>don\'t bar</foo>";`,
		"select '?';"},
	{"string_7",
		`select "2015-06-19";`,
		"select '?';"},
	{"string_8",
		`select "2015-06-19 00:00:00";`,
		"select '?';"},
	{"string_9",
		`select "foo"`,
		"select '?'"},
	{"string_number_1",
		`select 1 from 1foo1.bar1 where id = 12;`,
		"select ? from 1foo1.bar1 where id = ?;"},
	{"string_number_2",
		"select  1.1^1 from `1foo1`.`bar1`;",
		"select ?^? from 1foo1.bar1;"},
	{"string_number_alias_1",
		`select if(foo = "3", 1, 2) as "test";`,
		"select if(foo = '?', ?, ?) as '?';"},
	{"number_1",
		`select 1234;`,
		"select ?;"},
	{"number_2",
		`select .1;`,
		"select ?;"},
	{"number_3",
		`select 0.1;`,
		"select ?;"},
	{"number_4",
		`select -1;`,
		"select -?;"},
	{"number_5",
		`select -0.1;`,
		"select -?;"},
	{"number_6",
		`select -.1;`,
		"select -?;"},
	{"number_7",
		`select - 1;`,
		"select - ?;"},
	{"number_8",
		`select (id + 1);`,
		"select (id + ?);"},
	{"function_1",
		"select abs(1);",
		"select abs(?);"},
	{"function_2",
		"select if(1, 1, 0);",
		"select if(?, ?, ?);"},
	{"list_1",
		`select if(4 in (1, 2, 3), true, false); from foo where id in (1, 2, 3);`,
		"select if(? in (?), true, false); from foo where id in (?);"},
	{"strange_case_1",
		"-",
		"-"},
	{"strange_case_2",
		"",
		""},
}

func TestDigest(t *testing.T) {
	for _, test := range queries {
		actual := sql.Digest(test.Input)

		if test.Expected != actual {
			t.Error("test '" + test.ID + "' failed. actual = " + actual)
		}
	}
}
